{
  "name": "Cs482-hwk1",
  "tagline": "By R. Patrick Wannall",
  "body": "The first thing I did was try to get a relatively handsome picture of my face. I cropped it to be 512x512, then I put it in grayscale. I cropped it outside of OpenCV because I did not want to stretch the image. I had 2 separate Python files. My original file was read using cv2.imread(). Then from that I did my Gaussian Blurs with sigma 1, 2 and 3. Using the cv2.GaussianBlur(). Then I was left with 4 images. Each of those images I found the X and Y gradients. I used the OpenCV function cv2.sobel(). For the X gradient I used 1,0 and for the Y gradient I used the 0,1. Then I had 12 images. The only thing left was to find the magnitude. The OpenCV function I used was cv2.canny() which handles edge detection. I did that on all of the images. The more blurred the lines became, the less edges were left in the final image. \r\n\r\nHere are the 16 images which I was left with at the end (an extra 17th because I think I look so damned good in the original): \r\n\r\n\r\n# Here is the first original image\r\n\r\n\r\n\r\n# Grayscale 512x512\r\n\r\n\r\n\r\n\r\n# Gaussian Blur Images\r\n\r\n\r\n## sigma = 1\r\n\r\n\r\n## sigma = 2\r\n\r\n\r\n## sigma = 3\r\n\r\n\r\n\r\n\r\n# X derivatives\r\n\r\n## Original X\r\n\r\n\r\n## Blur 1 X\r\n\r\n\r\n## Blur 2 X\r\n\r\n\r\n## Blur 3 X\r\n\r\n\r\n# Y Derivatives\r\n\r\n\r\n## Original Y\r\n\r\n\r\n## Blur 1 Y\r\n\r\n\r\n## Blur 2 Y\r\n\r\n\r\n## Blur 3 Y\r\n\r\n\r\n# Magnitude Edge Detections\r\n\r\n\r\n## Original Edges\r\n\r\n\r\n## Blur 1 Edges\r\n\r\n\r\n## Blur 2 Edges\r\n\r\n\r\n## Blur 3 Edges\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}